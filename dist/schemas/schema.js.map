{"version":3,"sources":["../../src/schemas/schema.js"],"names":["RootQuery","GraphQLObjectType","name","description","fields","user","type","UserType","args","id","GraphQLID","resolve","parent","User","findById","hobby","HobbyType","Hobby","post","PostType","Post","users","GraphQLList","logger","info","find","posts","hobbies","Mutation","CreateUser","GraphQLString","age","GraphQLInt","profession","save","then","log","err","error","CreatePost","comment","userId","creation","Date","a","CreateHobby","title","GraphQLSchema","query","mutation"],"mappings":"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","sourcesContent":["import logger from 'loggy'\nimport {\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLSchema,\n  GraphQLString,\n  GraphQLList,\n  GraphQLInt\n} from 'graphql'\n\nimport { UserType, HobbyType, PostType } from './types_schemas'\n\nimport User from '../model/User'\nimport Post from '../model/Post'\nimport Hobby from '../model/Hobby'\n\n// RootQuery\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  description: 'The root query',\n  fields: {\n    user: {\n      type: UserType,\n      args: {\n        id: { type: GraphQLID }\n      },\n      resolve(parent, args) {\n        return User.findById(args.id)\n      }\n    },\n    hobby: {\n      type: HobbyType,\n      args: {\n        id: { type: GraphQLID }\n      },\n      resolve(parent, args) {\n        return Hobby.findById(args.id)\n      }\n    },\n    post: {\n      type: PostType,\n      args: {\n        id: { type: GraphQLID }\n      },\n      resolve(parent, args) {\n        return Post.findById(args.id)\n      }\n    },\n    users: {      \n      type: new GraphQLList(UserType),\n      resolve() {\n        logger.info('Looking for users')\n        return User.find()\n      }\n    },\n    posts: {\n      type: new GraphQLList(PostType),\n      resolve() {\n        logger.info('Looking for posts')\n        return Post.find()\n      }\n    },\n    hobbies: {\n      type: new GraphQLList(HobbyType),\n      resolve() {\n        logger.info('Looking for hobbies')\n        return Hobby.find()\n      }\n    }\n  }\n})\n\n// Mutations\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    CreateUser: {\n      type: UserType,\n      args: {\n        name: { type: GraphQLString },\n        age: { type: GraphQLInt },\n        profession: { type: GraphQLString }\n      },\n      resolve(parent, args) {\n        let user = new User({ ...args })\n        user\n          .save()\n          .then(() => logger.log('Created'))\n          .catch(err => logger.error(err))\n        return user\n      }\n    },\n    CreatePost: {\n      type: PostType,\n      args: {\n        comment: { type: GraphQLString },\n        userId: { type: GraphQLID }\n      },\n      resolve(parent, args) {\n        logger.log('Post created')\n        let post = new Post({ ...args, creation: new Date() })\n        post\n          .save()\n          .then((a) => logger.log(a))\n          .catch(err => logger.error(err))\n        return post\n      }\n    },\n    CreateHobby: {\n      type: HobbyType,\n      args: {\n        title: { type: GraphQLString },\n        description: { type: GraphQLString },\n        userId: { type: GraphQLID }\n      },\n      resolve(parent, args) {\n        logger.log('Hobby created')\n        let hobby = new Hobby({ ...args })\n        hobby\n          .save()\n          .then(() => logger.log('Created'))\n          .catch(err => logger.error(err))\n        return hobby\n      }\n    }\n  }\n})\n\nexport default new GraphQLSchema({\n  query: RootQuery,\n  mutation: Mutation\n})\n"],"file":"schema.js"}